CREATE TABLE [dbo].[UserSettings](
	[Id] [uniqueidentifier] NULL,
	[UserId] [uniqueidentifier] NULL,
	[Key] [varchar](100) NULL,
	[ValueString] [varchar](200) NULL,
	[ValueInt] [int] NULL,
	[ValueBool] [bit] NULL,
	[ValueDecimal] [decimal](18, 0) NULL
) ON [PRIMARY]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [mfs].[UserRoles](
	[UserId] [nvarchar](128) NOT NULL,
	[RoleId] [nvarchar](128) NOT NULL,
 CONSTRAINT [PK_mfs.UserRoles] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [IX_mfsRoleId] ON [mfs].[UserRoles]
(
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE NONCLUSTERED INDEX [IX_mfsUserId] ON [mfs].[UserRoles]
(
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [mfs].[UserRoles]  WITH CHECK ADD  CONSTRAINT [FK_mfs.UserRoles_mfs.Roles_RoleId] FOREIGN KEY([RoleId])
REFERENCES [mfs].[Roles] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [mfs].[UserRoles] CHECK CONSTRAINT [FK_mfs.UserRoles_mfs.Roles_RoleId]
GO
ALTER TABLE [mfs].[UserRoles]  WITH CHECK ADD  CONSTRAINT [FK_mfs.UserRoles_mfs.Users_UserId] FOREIGN KEY([UserId])
REFERENCES [mfs].[Users] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [mfs].[UserRoles] CHECK CONSTRAINT [FK_mfs.UserRoles_mfs.Users_UserId]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create trigger [mfs].[tAuditUserRoles] on [mfs].[UserRoles]
after update, INSERT
AS
BEGIN
    insert into mfs.UserRoles_log
    (LogAction, LogDate, DbName, SystemUser, CurrentUser, HostName, ApplicationName, ProcedureName, local_net_address, local_tcp_port, client_net_address, 
    UserId, RoleId)
    select
    case when exists (select * from deleted) then 'Updated' else 'Inserted' end,
    getdate(), DB_NAME(), suser_sname(), CURRENT_USER, HOST_NAME(), APP_NAME(), OBJECT_NAME(@@PROCID), convert(varchar(100), ConnectionProperty('local_net_address')), convert(varchar(100), ConnectionProperty('local_tcp_port')), convert(varchar(100), ConnectionProperty('client_net_address')),
    UserId, RoleId
    from inserted
END
GO
ALTER TABLE [mfs].[UserRoles] ENABLE TRIGGER [tAuditUserRoles]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [mfs].[tAuditUserRolesDelete] on [mfs].[UserRoles]
after delete
AS
BEGIN
    insert into AspNetUserRoles_log
    (LogAction, LogDate, DbName, SystemUser, CurrentUser, HostName, ApplicationName, ProcedureName, local_net_address, local_tcp_port, client_net_address, 
    UserId, RoleId)
    select
    'Deleted',
    getdate(), DB_NAME(), suser_sname(), CURRENT_USER, HOST_NAME(), APP_NAME(), OBJECT_NAME(@@PROCID), convert(varchar(100), ConnectionProperty('local_net_address')), convert(varchar(100), ConnectionProperty('local_tcp_port')), convert(varchar(100), ConnectionProperty('client_net_address')),
    UserId, RoleId
    from deleted
END
GO
ALTER TABLE [mfs].[UserRoles] ENABLE TRIGGER [tAuditUserRolesDelete]
GO

GO
CREATE TABLE [mfs].[UserCustomers](
	[Id] [uniqueidentifier] NOT NULL,
	[UserId] [uniqueidentifier] NULL,
	[CustomerId] [uniqueidentifier] NULL,
PRIMARY KEY NONCLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [CIX_UserCustomers] ON [mfs].[UserCustomers]
(
	[UserId] ASC,
	[CustomerId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [mfs].[UserCustomers] ADD  DEFAULT (newid()) FOR [Id]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [mfs].[UserApplications](
	[Id] [uniqueidentifier] NOT NULL,
	[UserId] [uniqueidentifier] NULL,
	[ApplicationId] [uniqueidentifier] NULL,
PRIMARY KEY NONCLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [CIX_UserApplications] ON [mfs].[UserApplications]
(
	[UserId] ASC,
	[ApplicationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [mfs].[UserApplications] ADD  DEFAULT (newid()) FOR [Id]
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Users](
	[Id] [nvarchar](128) NOT NULL,
	[UserName] [nvarchar](256) NULL,
	[NormalizedUserName] [nvarchar](256) NULL,
	[Email] [nvarchar](256) NULL,
	[NormalizedEmail] [nvarchar](256) NULL,
	[EmailConfirmed] [bit] NOT NULL,
	[PasswordHash] [nvarchar](max) NULL,
	[SecurityStamp] [nvarchar](max) NULL,
	[ConcurrencyStamp] [nvarchar](max) NULL,
	[PhoneNumber] [nvarchar](max) NULL,
	[PhoneNumberConfirmed] [bit] NOT NULL,
	[TwoFactorEnabled] [bit] NOT NULL,
	[LockoutEnd] [datetime] NULL,
	[LockoutEnabled] [bit] NOT NULL,
	[AccessFailedCount] [int] NOT NULL,
	[KnownAs] [nvarchar](256) NULL,
	[EpicorUserName] [varchar](100) NOT NULL,
	[CustomerId] [uniqueidentifier] NULL,
	[EpicorPassword] [varchar](max) NULL,
	[EpicorUser] [bit] NOT NULL,
	[ApplicationId] [uniqueidentifier] NULL,
	[Suspended] [bit] NOT NULL,
 CONSTRAINT [PK_AspNetUsers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
CREATE UNIQUE NONCLUSTERED INDEX [EmailIndex] ON [dbo].[Users]
(
	[NormalizedEmail] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[Users] ADD  CONSTRAINT [DefaultValue]  DEFAULT ('') FOR [EpicorUserName]
GO
ALTER TABLE [dbo].[Users] ADD  CONSTRAINT [DF_Suspended]  DEFAULT ((0)) FOR [Suspended]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create trigger [dbo].[tAuditUsers] on [dbo].[Users]
after update, INSERT
AS
BEGIN
    insert into Users_log
    (LogAction, LogDate, DbName, SystemUser, CurrentUser, HostName, ApplicationName, ProcedureName, local_net_address, local_tcp_port, client_net_address, 
    Id, UserName, [NormalizedUserName], Email, NormalizedEmail, EmailConfirmed, PasswordHash, SecurityStamp, ConcurrencyStamp, PhoneNumber, PhoneNumberConfirmed, TwoFactorEnabled, LockoutEnd, 
    LockoutEnabled, AccessFailedCount)
    select
    case when exists (select * from deleted) then 'Updated' else 'Inserted' end,
    getdate(), DB_NAME(), suser_sname(), CURRENT_USER, HOST_NAME(), APP_NAME(), OBJECT_NAME(@@PROCID), convert(varchar(100), ConnectionProperty('local_net_address')), convert(varchar(100), ConnectionProperty('local_tcp_port')), convert(varchar(100), ConnectionProperty('client_net_address')),
    Id, UserName, NormalizedUserName, Email, NormalizedEmail, EmailConfirmed, PasswordHash, SecurityStamp, ConcurrencyStamp, PhoneNumber, PhoneNumberConfirmed, TwoFactorEnabled, LockoutEnd, 
    LockoutEnabled, AccessFailedCount
    from inserted
END
GO
ALTER TABLE [dbo].[Users] ENABLE TRIGGER [tAuditUsers]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create trigger [dbo].[tAuditUsersDelete] on [dbo].[Users]
after delete
AS
BEGIN
    insert into Users_log
    (LogAction, LogDate, DbName, SystemUser, CurrentUser, HostName, ApplicationName, ProcedureName, local_net_address, local_tcp_port, client_net_address, 
    Id, UserName, NormalizedUserName, Email, NormalizedEmail, EmailConfirmed, PasswordHash, SecurityStamp, ConcurrencyStamp, PhoneNumber, PhoneNumberConfirmed, TwoFactorEnabled, LockoutEnd, 
    LockoutEnabled, AccessFailedCount	 )
    select
    'Deleted',
    getdate(), DB_NAME(), suser_sname(), CURRENT_USER, HOST_NAME(), APP_NAME(), OBJECT_NAME(@@PROCID), convert(varchar(100), ConnectionProperty('local_net_address')), convert(varchar(100), ConnectionProperty('local_tcp_port')), convert(varchar(100), ConnectionProperty('client_net_address')),
    Id, UserName, NormalizedUserName, Email, NormalizedEmail, EmailConfirmed, PasswordHash, SecurityStamp, ConcurrencyStamp, PhoneNumber, PhoneNumberConfirmed, TwoFactorEnabled, LockoutEnd, 
    LockoutEnabled, AccessFailedCount
    from deleted
END
GO
ALTER TABLE [dbo].[Users] ENABLE TRIGGER [tAuditUsersDelete]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CustomerApps](
	[CustomerAppID] [uniqueidentifier] NOT NULL,
	[CustomerID] [uniqueidentifier] NOT NULL,
	[ApplicationID] [uniqueidentifier] NOT NULL,
	[LicenceKey] [nvarchar](max) NULL,
	[CreateDate] [datetime] NOT NULL,
	[Suspended] [bit] NOT NULL,
	[MaxDevices] [int] NULL,
	[PayDuration] [varchar](8) NULL,
	[PayDate] [datetime] NULL,
	[Paid] [bit] NULL,
	[RequestStatus] [varchar](20) NULL,
	[RequestDevices] [int] NULL,
	[ImageResolution] [varchar](10) NULL,
	[ImageResolutionFix] [bit] NULL,
	[TrackLocation] [bit] NOT NULL,
	[ExternalLicenceKey] [varchar](100) NULL,
	[PhotoFirst] [bit] NOT NULL,
	[SkipName] [bit] NOT NULL,
	[Demo] [bit] NOT NULL,
	[LicenseType] [nvarchar](20) NULL,
	[InactiveTime] [int] NULL,
	[MaxLicenses] [int] NOT NULL,
	[ConcurrentLicenses] [bit] NULL,
 CONSTRAINT [PK_dbo.CustomerApps] PRIMARY KEY CLUSTERED 
(
	[CustomerAppID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
ALTER TABLE [dbo].[CustomerApps] ADD  DEFAULT ('') FOR [PayDuration]
GO
ALTER TABLE [dbo].[CustomerApps] ADD  DEFAULT ('') FOR [RequestStatus]
GO
ALTER TABLE [dbo].[CustomerApps] ADD  DEFAULT ('medium') FOR [ImageResolution]
GO
ALTER TABLE [dbo].[CustomerApps] ADD  DEFAULT ((1)) FOR [ImageResolutionFix]
GO
ALTER TABLE [dbo].[CustomerApps] ADD  DEFAULT ((0)) FOR [TrackLocation]
GO
ALTER TABLE [dbo].[CustomerApps] ADD  DEFAULT ('') FOR [ExternalLicenceKey]
GO
ALTER TABLE [dbo].[CustomerApps] ADD  DEFAULT ((0)) FOR [PhotoFirst]
GO
ALTER TABLE [dbo].[CustomerApps] ADD  DEFAULT ((0)) FOR [SkipName]
GO
ALTER TABLE [dbo].[CustomerApps] ADD  DEFAULT ((0)) FOR [Demo]
GO
ALTER TABLE [dbo].[CustomerApps] ADD  DEFAULT ('None') FOR [LicenseType]
GO
ALTER TABLE [dbo].[CustomerApps] ADD  DEFAULT ((0)) FOR [InactiveTime]
GO
ALTER TABLE [dbo].[CustomerApps] ADD  DEFAULT ((0)) FOR [MaxLicenses]
GO
ALTER TABLE [dbo].[CustomerApps] ADD  DEFAULT ((0)) FOR [ConcurrentLicenses]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE TRIGGER [dbo].[EditCustomersFromLicPortalToWiki]
ON [GHALicensePortal].[dbo].[CustomerApps]
FOR INSERT , UPDATE
AS
BEGIN
declare @query VARCHAR(max)
declare @customerId VARCHAR(max)
declare @customerAppId VARCHAR(max)
declare @oldcustomerid VARCHAR(max)
declare @suspended bit
declare @oldsuspended bit
declare @userId VARCHAR(max)

declare @response as table(UserID NVARCHAR(max))

select
	@oldcustomerid = customerid,
	@oldcustomerid = suspended
from deleted

select
	@customerid = customerid,
	@customerAppId = customerappid,
	@suspended = suspended
from inserted

if  @oldcustomerId = @customerId and @oldSuspended = @suspended return;

	if (
		select count(*) 
		from CustomerApps a 
			join Applications b on a.ApplicationID = b.ApplicationID 
		where a.CustomerID = @customerId and b.WikiLinks = 1 and a.CustomerAppID = @customerAppId
		) = 0 return;

insert into @response select id from GHALicensePortal.dbo.AspNetUsers where customerId = @customerId 
while(select count(*) from @response) > 0
BEGIN
	select top 1 @userId = UserID from @response
	set @query = '{"UserID" : "'+@userId+'", "Action" : "EditUser"}'
	exec GHALicenseMQ.dbo.Send_Message '//gha/wiki/out','//gha/wiki/User',  @query
	delete from @response where UserID = @userId
END




end
GO
ALTER TABLE [dbo].[CustomerApps] ENABLE TRIGGER [EditCustomersFromLicPortalToWiki]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[tAuditCustomerApps] on [dbo].[CustomerApps]
after update, INSERT
AS
BEGIN
    insert into CustomerApps_log
    (LogAction, LogDate, DbName, SystemUser, CurrentUser, HostName, ApplicationName, ProcedureName, local_net_address, local_tcp_port, client_net_address, 
    CustomerAppID, CustomerID, ApplicationID, LicenceKey, CreateDate, Suspended, MaxDevices, PayDuration, PayDate, Paid, RequestStatus, RequestDevices, 
    ImageResolution, ImageResolutionFix, TrackLocation, ExternalLicenceKey, PhotoFirst, SkipName)
    select
    case when exists (select * from deleted) then 'Updated' else 'Inserted' end,
    getdate(), DB_NAME(), suser_sname(), CURRENT_USER, HOST_NAME(), APP_NAME(), OBJECT_NAME(@@PROCID), convert(varchar(100), ConnectionProperty('local_net_address')), convert(varchar(100), ConnectionProperty('local_tcp_port')), convert(varchar(100), ConnectionProperty('client_net_address')),
    CustomerAppID, CustomerID, ApplicationID, LicenceKey, CreateDate, Suspended, MaxDevices, PayDuration, PayDate, Paid, RequestStatus, RequestDevices, 
    ImageResolution, ImageResolutionFix, TrackLocation, ExternalLicenceKey, PhotoFirst, SkipName	
    from inserted
END
GO
ALTER TABLE [dbo].[CustomerApps] ENABLE TRIGGER [tAuditCustomerApps]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[tAuditCustomerAppsDelete] on [dbo].[CustomerApps]
after delete
AS
BEGIN
    insert into CustomerApps_log
    (LogAction, LogDate, DbName, SystemUser, CurrentUser, HostName, ApplicationName, ProcedureName, local_net_address, local_tcp_port, client_net_address, 
    CustomerAppID, CustomerID, ApplicationID, LicenceKey, CreateDate, Suspended, MaxDevices, PayDuration, PayDate, Paid, RequestStatus, RequestDevices, 
    ImageResolution, ImageResolutionFix, TrackLocation, ExternalLicenceKey, PhotoFirst, SkipName)
    select
    'Deleted',
    getdate(), DB_NAME(), suser_sname(), CURRENT_USER, HOST_NAME(), APP_NAME(), OBJECT_NAME(@@PROCID), convert(varchar(100), ConnectionProperty('local_net_address')), convert(varchar(100), ConnectionProperty('local_tcp_port')), convert(varchar(100), ConnectionProperty('client_net_address')),
    CustomerAppID, CustomerID, ApplicationID, LicenceKey, CreateDate, Suspended, MaxDevices, PayDuration, PayDate, Paid, RequestStatus, RequestDevices, 
    ImageResolution, ImageResolutionFix, TrackLocation, ExternalLicenceKey, PhotoFirst, SkipName	
    from deleted
END
GO
ALTER TABLE [dbo].[CustomerApps] ENABLE TRIGGER [tAuditCustomerAppsDelete]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[UpdateCustomerApplicationsFromLicPortalToWiki]
ON [GHALicensePortal].[dbo].[CustomerApps]
FOR INSERT , UPDATE
AS
BEGIN
declare @email varchar(300)
declare @username varchar(100)
declare @query VARCHAR(max)
declare @id VARCHAR(100)
declare @group VARCHAR(max) = ''
declare @roleID VARCHAR(max)
declare @newApplication VARCHAR(max)
declare @customerId VARCHAR(max)
declare @application VARCHAR(max)
declare @applicationID varChar(max)
declare @suspended varChar(max)

declare @customerApps as table(CustomerID NVARCHAR(max), ApplicationID NVARCHAR(max))
declare @response as table(CustomerID NVARCHAR(max), RoleID NVARCHAR(max))
declare @customers as table(ID Nvarchar(max), Email NVARCHAR(max),knownas NvarChar(max))


    select @customerId = customerid from inserted
    insert into @customers select Id,Email,KnownAs from GHALicensePortal.dbo.AspNetUsers where CustomerID = @customerId
    while(select count(*) from @customers) > 0
    BEGIN
    set @id = (select top 1 [Id] from @customers)
    set @email = (select top 1 [Email] from @customers)
    set @username = (select top 1 [Knownas] from @customers)
-----------------------------------------------------------------------------------------------------------------------------
      insert into @response select * from GHALicensePortal.dbo.AspNetUserRoles where UserId = @id
      while(select count(*) from @response) > 0
      BEGIN
        select top 1 @roleID = RoleID from @response

        set @newApplication = (select top 1 [Name] from GHALicensePortal.dbo.AspNetRoles where Id = @roleID)

        set @group = @group + ',' + @newApplication
      delete from @response where RoleID = @roleID
      end
-----------------------------------------------------------------------------------------------------------------------------
    set @group = @group + ':'
-----------------------------------------------------------------------------------------------------------------------------
      insert into @customerApps select CustomerID,ApplicationID from GHALicensePortal.dbo.CustomerApps where CustomerID = @customerId
      while(select count(*) from @customerApps) > 0
      BEGIN
        select top 1 @applicationID = ApplicationID from @customerApps

        set @application = (select top 1 [Name] from GHALicensePortal.dbo.Applications where ApplicationID = @applicationID)
        set @suspended = (select top 1 [Suspended] from GHALicensePortal.dbo.Applications where ApplicationID = @applicationID)

        if (@suspended != 1)
        Begin
        if (@application != '')
        Begin
        set @group = @group + ',' + @application
        End
        end

      delete from @customerApps where ApplicationID = @applicationID
      end
-----------------------------------------------------------------------------------------------------------------------------
      set @query = '{
          "Email":"\u0022'+ @email + '\u0022",
          "Name":"\u0022'+ @username +'\u0022",
          "Password":"\u0022Password1\u0022",
          "ProviderKey":"\u0022local\u0022",
          "Group": "'+@group+'",
          "MustChangePassword":"true",
          "SendWelcomeEmail":"false"}'

      exec GHALicenseMQ.dbo.Send_Message '//gha/wiki/out','//gha/wiki/User',  @query

    --if @Email = 'test2@test.com'

    --update AspNetUsers set suspended = 1 where email = @email
      delete from @customers where ID = @id
      end
end

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


GO
ALTER TABLE [dbo].[CustomerApps] ENABLE TRIGGER [UpdateCustomerApplicationsFromLicPortalToWiki]
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Devices](
	[DeviceID] [uniqueidentifier] NOT NULL,
	[CustomerID] [uniqueidentifier] NOT NULL,
	[LicenceKey] [nvarchar](max) NULL,
	[CreateDate] [datetime] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[DeviceIdentity] [nvarchar](max) NULL,
	[TokenID] [nvarchar](max) NULL,
	[Suspended] [bit] NOT NULL,
	[ApplicationID] [uniqueidentifier] NULL,
	[OS] [varchar](10) NULL,
	[LastCallTime] [datetime] NULL,
	[Calls] [int] NULL,
	[Identifier] [varchar](100) NULL,
	[Testing] [bit] NOT NULL,
	[LocationTime] [datetime] NULL,
	[Latitude] [float] NOT NULL,
	[Longitude] [float] NOT NULL,
	[Admin] [bit] NULL,
	[ApprovalStatus] [int] NOT NULL,
	[HardLogin] [bit] NULL,
	[AppVersion] [varchar](60) NULL,
	[UserId] [uniqueidentifier] NULL,
	[LastLogin] [datetime] NULL,
 CONSTRAINT [PK_dbo.Devices] PRIMARY KEY CLUSTERED 
(
	[DeviceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_CustomerID] ON [dbo].[Devices]
(
	[CustomerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[Devices] ADD  DEFAULT ((0)) FOR [Testing]
GO
ALTER TABLE [dbo].[Devices] ADD  DEFAULT ((0)) FOR [Latitude]
GO
ALTER TABLE [dbo].[Devices] ADD  DEFAULT ((0)) FOR [Longitude]
GO
ALTER TABLE [dbo].[Devices] ADD  CONSTRAINT [Default_Admin]  DEFAULT ((0)) FOR [Admin]
GO
ALTER TABLE [dbo].[Devices] ADD  CONSTRAINT [Default_ApprovalStatus]  DEFAULT ((0)) FOR [ApprovalStatus]
GO
ALTER TABLE [dbo].[Devices] ADD  DEFAULT ((0)) FOR [HardLogin]
GO
ALTER TABLE [dbo].[Devices]  WITH CHECK ADD  CONSTRAINT [FK_dbo.Devices_dbo.Customers_CustomerID] FOREIGN KEY([CustomerID])
REFERENCES [dbo].[Customers] ([CustomerID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Devices] CHECK CONSTRAINT [FK_dbo.Devices_dbo.Customers_CustomerID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[tAuditDevices] on [dbo].[Devices]
after update, INSERT
AS
BEGIN
    insert into Devices_log
    (LogAction, LogDate, DbName, SystemUser, CurrentUser, HostName, ApplicationName, ProcedureName, local_net_address, local_tcp_port, client_net_address, 
    DeviceID, [CustomerID], [CreateDate], [Name], [DeviceIdentity], [Suspended] , [ApplicationID], [OS], [LastCallTime], [Calls], [Identifier], 
    [Testing], [LocationTime], [Latitude], [Longitude])
    select
    case when exists (select * from deleted) then 'Updated' else 'Inserted' end,
    getdate(), DB_NAME(), suser_sname(), CURRENT_USER, HOST_NAME(), APP_NAME(), OBJECT_NAME(@@PROCID), convert(varchar(100), ConnectionProperty('local_net_address')), convert(varchar(100), ConnectionProperty('local_tcp_port')), convert(varchar(100), ConnectionProperty('client_net_address')),
    DeviceID, [CustomerID], [CreateDate], [Name], [DeviceIdentity], [Suspended] , [ApplicationID], [OS], [LastCallTime], [Calls], [Identifier], 
    [Testing], [LocationTime], [Latitude], [Longitude]
    from inserted
END
GO
ALTER TABLE [dbo].[Devices] ENABLE TRIGGER [tAuditDevices]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[tAuditDevicesDelete] on [dbo].[Devices]
after delete
AS
BEGIN
    insert into Devices_log
    (LogAction, LogDate, DbName, SystemUser, CurrentUser, HostName, ApplicationName, ProcedureName, local_net_address, local_tcp_port, client_net_address, 
    DeviceID, [CustomerID], [CreateDate], [Name], [DeviceIdentity], [Suspended] , [ApplicationID], [OS], [LastCallTime], [Calls], [Identifier], 
    [Testing], [LocationTime], [Latitude], [Longitude])
    select
    'Deleted',
    getdate(), DB_NAME(), suser_sname(), CURRENT_USER, HOST_NAME(), APP_NAME(), OBJECT_NAME(@@PROCID), convert(varchar(100), ConnectionProperty('local_net_address')), convert(varchar(100), ConnectionProperty('local_tcp_port')), convert(varchar(100), ConnectionProperty('client_net_address')),
    DeviceID, [CustomerID], [CreateDate], [Name], [DeviceIdentity], [Suspended] , [ApplicationID], [OS], [LastCallTime], [Calls], [Identifier], 
    [Testing], [LocationTime], [Latitude], [Longitude]
    from deleted
END
GO
ALTER TABLE [dbo].[Devices] ENABLE TRIGGER [tAuditDevicesDelete]
GO


ET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Applications](
	[ApplicationID] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[LicenceKey] [nvarchar](max) NULL,
	[CreateDate] [datetime] NOT NULL,
	[Suspended] [bit] NOT NULL,
	[AppStoreUrl] [varchar](255) NULL,
	[PlayStoreUrl] [varchar](255) NULL,
	[BrochureUrl] [varchar](255) NULL,
	[Icon] [nvarchar](50) NULL,
	[TermsUrl] [nvarchar](200) NULL,
	[ShowSettings] [bit] NOT NULL,
	[WikiLinks] [bit] NOT NULL,
	[AppVersion] [varchar](100) NOT NULL,
	[CabVersion] [varchar](50) NULL,
	[IsSession] [bit] NOT NULL,
	[SessionParameter] [varchar](450) NOT NULL,
	[HideIfNotLicensed] [bit] NOT NULL,
	[SendCabEmail] [bit] NOT NULL,
	[SendUpdateEmail] [bit] NOT NULL,
	[SendUserGuidesEmail] [bit] NOT NULL,
	[SendAPIImprovementsEmail] [bit] NOT NULL,
	[SendFieldCabEmail] [bit] NOT NULL,
	[SendParamScreen] [bit] NOT NULL,
	[SendWebEmail] [bit] NOT NULL,
	[CustomerApp_CustomerAppID] [uniqueidentifier] NULL,
	[Customer_CustomerID] [uniqueidentifier] NULL,
	[VersionBAQ] [varchar](30) NULL,
	[WebVersion] [varchar](100) NOT NULL,
	[ImageData] [varchar](max) NULL,
	[AppRelease] [datetime] NULL,
 CONSTRAINT [PK_dbo.Applications] PRIMARY KEY CLUSTERED 
(
	[ApplicationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_Customer_CustomerID] ON [dbo].[Applications]
(
	[Customer_CustomerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_CustomerApp_CustomerAppID] ON [dbo].[Applications]
(
	[CustomerApp_CustomerAppID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ('') FOR [LicenceKey]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ('') FOR [Icon]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ('') FOR [TermsUrl]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ((0)) FOR [ShowSettings]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ((0)) FOR [WikiLinks]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ('') FOR [AppVersion]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ('') FOR [CabVersion]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ((0)) FOR [IsSession]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ('') FOR [SessionParameter]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ((0)) FOR [HideIfNotLicensed]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ((0)) FOR [SendCabEmail]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ((0)) FOR [SendUpdateEmail]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ((0)) FOR [SendUserGuidesEmail]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ((0)) FOR [SendAPIImprovementsEmail]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ((0)) FOR [SendFieldCabEmail]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ((0)) FOR [SendParamScreen]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ((0)) FOR [SendWebEmail]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ('') FOR [VersionBAQ]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ('') FOR [WebVersion]
GO
ALTER TABLE [dbo].[Applications] ADD  DEFAULT ('') FOR [ImageData]
GO
ALTER TABLE [dbo].[Applications]  WITH CHECK ADD  CONSTRAINT [FK_dbo.Applications_dbo.CustomerApps_CustomerApp_CustomerAppID] FOREIGN KEY([CustomerApp_CustomerAppID])
REFERENCES [dbo].[CustomerApps] ([CustomerAppID])
GO
ALTER TABLE [dbo].[Applications] CHECK CONSTRAINT [FK_dbo.Applications_dbo.CustomerApps_CustomerApp_CustomerAppID]
GO
ALTER TABLE [dbo].[Applications]  WITH CHECK ADD  CONSTRAINT [FK_dbo.Applications_dbo.Customers_Customer_CustomerID] FOREIGN KEY([Customer_CustomerID])
REFERENCES [dbo].[Customers] ([CustomerID])
GO
ALTER TABLE [dbo].[Applications] CHECK CONSTRAINT [FK_dbo.Applications_dbo.Customers_Customer_CustomerID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[EditApplicationFromLicPortalToWiki]
ON [GHALicensePortal].[dbo].[Applications]
FOR INSERT , UPDATE
AS
BEGIN
declare @applicationId VARCHAR(max)
declare @oldApplicationId VARCHAR(max)
declare @applicationName VARCHAR(max)
declare @oldApplicationName VARCHAR(max)
declare @suspended bit
declare @oldSuspended bit 
declare @customerID VARCHAR(max)
declare @userID VARCHAR(max) = ''
declare @query VARCHAR(max) = ''

declare @response as table(customerID NVARCHAR(max))
declare @customerResponse as table(UserID NVARCHAR(max))

if (select count(*) from inserted where WikiLinks = 1) = 0 return;

select
	@oldApplicationId = ApplicationID,
	@oldApplicationName = Name,
	@oldSuspended = Suspended
from deleted

select
	@applicationId = ApplicationID,
	@applicationName = Name,
	@suspended = Suspended
from inserted

if @oldApplicationId = @applicationId and @oldApplicationName = @applicationName and @oldSuspended = @suspended return;

insert into @response select customerID from GHALicensePortal.dbo.CustomerApps where ApplicationID = @applicationId
while(select count(*) from @response) != 0
BEGIN
	select top 1 @customerID = customerID from @response
	insert into @customerResponse select id from GHALicensePortal.dbo.AspNetUsers where customerId = @customerId 
	select * from @customerResponse
	select count(*) from @customerResponse
	while(select count(*) from @customerResponse) != 0
    BEGIN
		select top 1 @userId = UserID from @customerResponse
		set @query = '{"UserID" : "'+@userId+'", "Action" : "EditUser"}'
		if @query != ''
			Begin
			exec GHALicenseMQ.dbo.Send_Message '//gha/wiki/out','//gha/wiki/User',  @query
			End
		delete from @customerResponse where UserID = @userId
	END
	delete from @response where customerID = @customerID
END

END
GO
ALTER TABLE [dbo].[Applications] ENABLE TRIGGER [EditApplicationFromLicPortalToWiki]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE trigger [dbo].[tAuditApplications] on [dbo].[Applications]
after update, INSERT
AS
BEGIN
    insert into Applications_log
    (LogAction, LogDate, DbName, SystemUser, CurrentUser, HostName, ApplicationName, ProcedureName, local_net_address, local_tcp_port, client_net_address, 
    ApplicationID, Name, LicenceKey, CreateDate, Suspended, AppStoreUrl, PlayStoreUrl, BrochureUrl, Icon, TermsUrl)
    select
    case when exists (select * from deleted) then 'Updated' else 'Inserted' end,
    getdate(), DB_NAME(), suser_sname(), CURRENT_USER, HOST_NAME(), APP_NAME(), OBJECT_NAME(@@PROCID), convert(varchar(100), ConnectionProperty('local_net_address')), convert(varchar(100), ConnectionProperty('local_tcp_port')), convert(varchar(100), ConnectionProperty('client_net_address')),
    ApplicationID, Name, LicenceKey, CreateDate, Suspended, AppStoreUrl, PlayStoreUrl, BrochureUrl, Icon, TermsUrl
    from inserted
END
GO
ALTER TABLE [dbo].[Applications] ENABLE TRIGGER [tAuditApplications]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[tAuditApplicationsDelete] on [dbo].[Applications]
after delete
AS
BEGIN
    insert into Applications_log
    (LogAction, LogDate, DbName, SystemUser, CurrentUser, HostName, ApplicationName, ProcedureName, local_net_address, local_tcp_port, client_net_address, 
    ApplicationID, Name, LicenceKey, CreateDate, Suspended, CustomerApp_CustomerAppID, Customer_CustomerID, AppStoreUrl, PlayStoreUrl, BrochureUrl, Icon, TermsUrl)
    select
    'Deleted',
    getdate(), DB_NAME(), suser_sname(), CURRENT_USER, HOST_NAME(), APP_NAME(), OBJECT_NAME(@@PROCID), convert(varchar(100), ConnectionProperty('local_net_address')), convert(varchar(100), ConnectionProperty('local_tcp_port')), convert(varchar(100), ConnectionProperty('client_net_address')),
    ApplicationID, Name, LicenceKey, CreateDate, Suspended, CustomerApp_CustomerAppID, Customer_CustomerID, AppStoreUrl, PlayStoreUrl, BrochureUrl, Icon, TermsUrl
    from deleted
END
GO
ALTER TABLE [dbo].[Applications] ENABLE TRIGGER [tAuditApplicationsDelete]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Customers](
	[CustomerID] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[LicenceKey] [nvarchar](max) NULL,
	[CreateDate] [datetime] NOT NULL,
	[DomainName] [nvarchar](max) NULL,
	[PrimaryContact] [nvarchar](max) NULL,
	[PrimaryEmail] [nvarchar](max) NULL,
	[BillingContact] [nvarchar](max) NULL,
	[BillingEmail] [nvarchar](max) NULL,
	[SupportContact] [nvarchar](max) NULL,
	[SupportEmail] [nvarchar](max) NULL,
	[CompanyLogo] [varbinary](max) NULL,
	[BackgroundColor] [nvarchar](max) NULL,
	[ForegroundColor] [nvarchar](max) NULL,
	[Suspended] [bit] NOT NULL,
	[CustomisationStamp] [uniqueidentifier] NULL,
	[ConnectionString] [varchar](800) NULL,
	[Environment] [varchar](10) NULL,
	[HostingType] [nvarchar](30) NOT NULL,
	[EpicorSyncEmail] [bit] NOT NULL,
	[EmailHostedStatusId] [uniqueidentifier] NULL,
	[SuspendFromMQ] [bit] NULL,
	[Service] [int] NULL,
 CONSTRAINT [PK_dbo.Customers] PRIMARY KEY CLUSTERED 
(
	[CustomerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
ALTER TABLE [dbo].[Customers] ADD  DEFAULT ('') FOR [Environment]
GO
ALTER TABLE [dbo].[Customers] ADD  DEFAULT ('') FOR [HostingType]
GO
ALTER TABLE [dbo].[Customers] ADD  DEFAULT ((1)) FOR [EpicorSyncEmail]
GO
ALTER TABLE [dbo].[Customers] ADD  DEFAULT ((0)) FOR [SuspendFromMQ]
GO
ALTER TABLE [dbo].[Customers] ADD  DEFAULT ((0)) FOR [Service]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[NewCustomerNewDatabase]
ON [dbo].[Customers]
FOR INSERT
AS
BEGIN
    declare @customerid uniqueidentifier
    select @customerid = customerid from inserted
    declare @customer varchar(60) = convert(varchar(60), @customerid)

    declare @msg nvarchar(800) = '{ CustomerId : "' + @customer + '" }'

    exec [GHALicenseMQ].dbo.Send_Message '//gha/portal/out', '//gha/portal/NewCustomer', @msg
end
GO
ALTER TABLE [dbo].[Customers] ENABLE TRIGGER [NewCustomerNewDatabase]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE TRIGGER [dbo].[SendCustomerFromLicPortalToWiki]
ON [GHALicensePortal].[dbo].[Customers]
FOR INSERT , UPDATE
AS
BEGIN
declare @query VARCHAR(max)
declare @oldcustomerId VARCHAR(max)
declare @customerId VARCHAR(max)
declare @suspended bit
declare @oldSuspended bit
declare @userId VARCHAR(max)

declare @response as table(UserID NVARCHAR(max))


	select  
		@oldcustomerId = customerid, 
		@oldSuspended = Suspended 
	from deleted

	select
		@customerId = customerid, 
		@suspended = Suspended 
	from inserted

	if  @oldcustomerId = @customerId and @oldSuspended = @suspended return;

	if @suspended = 1 return;

		if (
		select count(*) 
		from CustomerApps a 
			join Applications b on a.ApplicationID = b.ApplicationID 
		where a.CustomerID = @customerId and b.WikiLinks = 1
		) = 0 return;

	insert into @response select id from GHALicensePortal.dbo.AspNetUsers where customerId = @customerId 
	while(select count(*) from @response) > 0
    BEGIN
		select top 1 @userId = UserID from @response
		set @query = '{"UserID" : "'+@userId+'", "Action" : EditUser}'
		exec GHALicenseMQ.dbo.Send_Message '//gha/wiki/out','//gha/wiki/User',  @query
		delete from @response where UserID = @userId
	END
END
GO
ALTER TABLE [dbo].[Customers] ENABLE TRIGGER [SendCustomerFromLicPortalToWiki]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[tAuditCustomers] on [dbo].[Customers]
after update, INSERT
AS
BEGIN
    insert into Customers_log
    (LogAction, LogDate, DbName, SystemUser, CurrentUser, HostName, ApplicationName, ProcedureName, local_net_address, local_tcp_port, client_net_address, 
    CustomerID, Name, LicenceKey, CreateDate, DomainName, PrimaryContact, PrimaryEmail, BillingContact, BillingEmail, SupportContact, SupportEmail, CompanyLogo, 
    BackgroundColor, ForegroundColor, Suspended, CustomisationStamp, ConnectionString)
    select
    case when exists (select * from deleted) then 'Updated' else 'Inserted' end,
    getdate(), DB_NAME(), suser_sname(), CURRENT_USER, HOST_NAME(), APP_NAME(), OBJECT_NAME(@@PROCID), convert(varchar(100), ConnectionProperty('local_net_address')), convert(varchar(100), ConnectionProperty('local_tcp_port')), convert(varchar(100), ConnectionProperty('client_net_address')),
    CustomerID, Name, LicenceKey, CreateDate, DomainName, PrimaryContact, PrimaryEmail, BillingContact, BillingEmail, SupportContact, SupportEmail, CompanyLogo, 
    BackgroundColor, ForegroundColor, Suspended, CustomisationStamp, ConnectionString
    from inserted
END
GO
ALTER TABLE [dbo].[Customers] ENABLE TRIGGER [tAuditCustomers]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create trigger [dbo].[tAuditCustomersDelete] on [dbo].[Customers]
after delete
AS
BEGIN
    insert into Customers_log
    (LogAction, LogDate, DbName, SystemUser, CurrentUser, HostName, ApplicationName, ProcedureName, local_net_address, local_tcp_port, client_net_address, 
    CustomerID, Name, LicenceKey, CreateDate, DomainName, PrimaryContact, PrimaryEmail, BillingContact, BillingEmail, SupportContact, SupportEmail, CompanyLogo, 
    BackgroundColor, ForegroundColor, Suspended, CustomisationStamp, ConnectionString)
    select
    'Deleted',
    getdate(), DB_NAME(), suser_sname(), CURRENT_USER, HOST_NAME(), APP_NAME(), OBJECT_NAME(@@PROCID), convert(varchar(100), ConnectionProperty('local_net_address')), convert(varchar(100), ConnectionProperty('local_tcp_port')), convert(varchar(100), ConnectionProperty('client_net_address')),
    CustomerID, Name, LicenceKey, CreateDate, DomainName, PrimaryContact, PrimaryEmail, BillingContact, BillingEmail, SupportContact, SupportEmail, CompanyLogo, 
    BackgroundColor, ForegroundColor, Suspended, CustomisationStamp, ConnectionString
    from deleted
END
GO
ALTER TABLE [dbo].[Customers] ENABLE TRIGGER [tAuditCustomersDelete]
GO

